<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CNet.Web.Api</name>
    </assembly>
    <members>
        <member name="T:CNet.Web.Api.WebApiExceptionAttribute">
            <summary>
            异常捕获
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Config.ApiExplorerIgnores.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            自带的Controller与swagger3.0冲突，在此排除扫描
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:CNet.Web.Api.Config.MiddlewareHelpers">
            <summary>
            中间件
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Config.MiddlewareHelpers.UseSwaggerAuthorizedMildd(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Swagger授权中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:CNet.Web.Api.SwaggerBasicAuthMiddleware">
            <summary>
            Swagger授权登录拦截
            </summary>
        </member>
        <member name="T:CNet.Web.Api.Controllers.AuthroizeController">
            <summary>
            认证
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Controllers.AuthroizeController.Post(CNet.Web.Api.LoginViewModel)">
            <summary>
            登录获取token
            </summary>
            <param name="loginViewModel">登录实体信息</param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubDeptController.GetChildList(System.String)">
            <summary>
            获取子部门列表
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubDeptController.Add(CNet.Model.Main.Pub_Department)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubDeptController.Edit(CNet.Model.Main.Pub_Department)">
            <summary>
            编辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubDeptController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.GetChildList(System.String)">
            <summary>
            获取子权限列表
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.Add(CNet.Model.Main.Pub_Function)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.Edit(CNet.Model.Main.Pub_Function)">
            <summary>
            编辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.GetMenu">
            <summary>
            获取左侧菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.GetMenuItem(CNet.Model.Main.Pub_Function)">
            <summary>
            菜单明细项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubFunctionController.GetMenuChild(System.Collections.Generic.List{CNet.Model.Main.Pub_Function},System.String)">
            <summary>
            菜单子项
            </summary>
            <param name="functions"></param>
            <param name="parentCode"></param>
            <returns></returns>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.path">
            <summary>
            路由路径
            </summary>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.children">
            <summary>
            子组件
            </summary>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.Meta.icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.Meta.notCache">
            <summary>
            不缓存 
            </summary>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.Meta.title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:CNet.Web.Api.Controllers.PubFunctionController.Menu.Meta.access">
            <summary>
            权限列表
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.Get(System.Object)">
            <summary>
            获取详细
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.GetPage(CNet.Web.Api.Model.Request.PageDataReq)">
            <summary>
            获取角色分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.Add(CNet.Model.Main.Pub_Role)">
            <summary>
            添加角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.Edit(CNet.Model.Main.Pub_Role)">
            <summary>
            编辑角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.Delete(System.Int64)">
            <summary>
            删除角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.GetFunctions(System.String)">
            <summary>
            获取角色权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubRoleController.SaveFunctions(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            保存角色权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.GetPage(CNet.Web.Api.Model.Request.PageDataReq)">
            <summary>
            获取用户分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.Add(CNet.Model.Main.V_Pubuser_Dept)">
            <summary>
            添加用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.Edit(CNet.Model.Main.V_Pubuser_Dept)">
            <summary>
            编辑用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.Delete(System.Int64)">
            <summary>
            删除用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.GetFunctions(System.String)">
            <summary>
            获取用户权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.SaveFunctions(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            保存用户权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.Logout">
            <summary>
            注销登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.PubUserController.EditPassword(CNet.Web.Api.EditPasswordReq)">
            <summary>
            修改用户密码
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.Pub_RoleController.GetList">
             <summary>
             获取所有
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Controllers.Pub_RoleController.Get(System.Int64)">
            <summary>
            获取详细
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.Pub_RoleController.GetPage(CNet.Web.Api.Model.Request.PageDataReq)">
            <summary>
            获取分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.Pub_RoleController.Add(CNet.Model.Main.Pub_Role)">
            <summary>
            添加角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.Pub_RoleController.Edit(CNet.Model.Main.Pub_Role)">
            <summary>
            编辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.Pub_RoleController.Delete(System.Int64)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:CNet.Web.Api.Controllers.UpLoadFileController">
            <summary>
            
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Controllers.UpLoadFileController.UploadInterface(System.String)">
            <summary>
            上传文件
            </summary>
            <param name="SourceType">字段标识符</param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.UpLoadFileController.SaveFile(CNet.Web.Api.Controllers.UpLoadFileController.FileSectionOption)">
            <summary>
            切片上传文件
            </summary>
            <param name="fileOption">字段标识符</param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.UpLoadFileController.MergeFile(CNet.Web.Api.Controllers.UpLoadFileController.MergFileOption)">
            <summary>
            合并切片，上传Oss
            </summary>
            <param name="fileOption"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.UpLoadFileController.DeleteSpecifiedPathAllFile(System.String)">
            <summary>
            删除指定路径下的所有文件
            </summary>
            <param name="filepath">指定路径</param>
            <returns></returns>
        </member>
        <member name="T:CNet.Web.Api.Controllers.UpLoadFileController.FileSectionOption">
            <summary>
            
            </summary>
        </member>
        <member name="T:CNet.Web.Api.Controllers.UpLoadFileController.MergFileOption">
            <summary>
            
            </summary>
        </member>
        <member name="M:CNet.Web.Api.Controllers.ValuesController.DITest(CNet.Web.Api.Model.DI_Test,System.Int32,System.Int32)">
            <summary>
            依赖注入
            </summary>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiMainController.GetPage(CNet.Web.Api.Model.Request.PageDataReq)">
            <summary>
            获取内容分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiMainController.Add(CNet.Model.Main.Wiki_Main)">
            <summary>
            添加内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiMainController.Edit(CNet.Model.Main.Wiki_Main)">
            <summary>
            编辑内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiMainController.Delete(System.Int64)">
            <summary>
            删除内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiMainController.GetDocxFile(System.String)">
            <summary>
            获取word流文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiMainController.GetPdfFile(System.String)">
            <summary>
            获取pdf流文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiSortController.Add(CNet.Model.Main.Wiki_Sort)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiSortController.Edit(CNet.Model.Main.Wiki_Sort)">
            <summary>
            编辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.Controllers.WikiSortController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:CNet.Web.Api.JwtAuthenticationAttribute">
            <summary>
            异常捕获
            </summary>
        </member>
        <member name="P:CNet.Web.Api.JwtSeetings.Issuer">
            <summary>
            谁颁发的jwt
            </summary>
        </member>
        <member name="P:CNet.Web.Api.JwtSeetings.Audience">
            <summary>
            谁使用这个jwt
            </summary>
        </member>
        <member name="P:CNet.Web.Api.JwtSeetings.SecretKey">
            <summary>
            secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，
            所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了
            通过jwt header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分
            </summary>
        </member>
        <member name="P:CNet.Web.Api.LoginViewModel.Name">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:CNet.Web.Api.LoginViewModel.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:CNet.Web.Api.EditPasswordReq.OldPassword">
            <summary>
            原密码
            </summary>
        </member>
        <member name="P:CNet.Web.Api.EditPasswordReq.Password">
            <summary>
            新密码
            </summary>
        </member>
        <member name="P:CNet.Web.Api.ResponseObj`1.Code">
            <summary>
            0请求数据错误 1 成功 -1失败
            </summary>
        </member>
        <member name="T:CNet.Web.Api.QueryHelper">
            <summary>
            搜索条件
            </summary>
        </member>
        <member name="M:CNet.Web.Api.QueryHelper.GetWhereStr(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取搜索query
            </summary>
        </member>
        <member name="M:CNet.Web.Api.QueryHelper.SqlFilter(System.String)">
            <summary>
            过滤危险的字符（SQL注入）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CNet.Web.Api.QueryHelper.InjectionFilter(System.String)">
            <summary>
             过滤危险字符
            </summary>
            <param name="inputString">需要过滤字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CNet.Web.Api.QueryHelper.XSSFilter(System.String)" -->
        <member name="M:CNet.Web.Api.QueryHelper.FlashFilter(System.String)">
            <summary>
             过滤字符串中注入Flash代码
            </summary>
            <param name="htmlCode">输入字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:CNet.Web.Api.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            这段代码必须放在Startup类里面
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CNet.Web.Api.Startup.Service_DI(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            依赖注入
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:CNet.Web.Api.Startup.JWTConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            使用 Microsoft.AspNetCore.Authentication.JwtBearer
            </summary>
            <param name="services"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AuthTokenHeaderParameter" -->
    </members>
</doc>
